// Copyright (c) 2025 Gabriel Lawrence
//
// Licensed under the MIT License. See LICENSE file in the project root for full license information.

package resources

import (
	"fmt"
)

// toolDescriptions contains all tool descriptions as Go string constants
var toolDescriptions = map[string]string{
	"auth_status": "Check authentication status including token expiry and refresh availability. Shows if you're logged in to OneNote.\n\nThe server automatically remembers your authentication across sessions - you typically only need to authenticate once. Use this tool to check if you're still authenticated or if your token has expired.\n\nRESPONSE SHOWS:\n• authenticated: true/false\n• token_expires: when current token expires\n• refresh_available: if token can be refreshed without re-auth\n\nUSE WHEN: Starting work, troubleshooting access issues, or checking token status.",

	"auth_refresh": "Refresh the current authentication token to extend session without full re-authentication.\n\nThe server stores and manages tokens automatically - you rarely need this tool. Use only when auth_status shows token expiry is approaching or after receiving authentication errors.\n\nWORKFLOW:\n1. Check: auth_status → shows 'expires soon' or 'expired'\n2. Refresh: auth_refresh → extends token automatically\n3. Verify: auth_status → confirms new expiry time\n\nNOTE: If refresh fails, use auth_initiate for full re-authentication.",

	"auth_initiate": "Start OAuth authentication flow. Returns a URL to visit in your browser to authenticate with Microsoft.\n\n⚠️ WHEN TO USE: Only needed for initial setup or after token revocation. Server remembers authentication across restarts - you typically authenticate once and you're done.\n\nFULL AUTHENTICATION WORKFLOW:\n1. Start server: ./onenote-mcp-server.exe\n2. Check status: auth_status → shows 'not authenticated'\n3. Initiate auth: auth_initiate → returns URL + instructions\n4. Visit URL in browser → complete Microsoft OAuth on localhost:8080\n5. Server automatically receives callback → saves tokens\n6. Verify: auth_status → shows 'authenticated'\n7. Ready for all OneNote operations\n\nSUBSEQUENT STARTS: Server loads saved tokens automatically - no re-auth needed unless revoked.\n\nDEPENDENCIES: All OneNote operations require authentication. Always explain next steps to user.",

	"auth_clear": "Logout by clearing all stored authentication tokens. Forces re-authentication for future OneNote operations.\n\n⚠️ WARNING: This removes the server's saved authentication. After using this, you'll need auth_initiate to authenticate again.\n\nWORKFLOW:\n1. Clear tokens: auth_clear → removes all stored credentials\n2. Verify logout: auth_status → shows 'not authenticated'\n3. Re-authenticate: auth_initiate → if you want to use OneNote again\n\nUSE WHEN: Security concerns, switching Microsoft accounts, or troubleshooting authentication issues.",

	"notebooks": "List all OneNote notebooks accessible to the authenticated user. Returns notebook ID, name, and default status flags as a JSON array.\n\n🏠 ESSENTIAL STARTING POINT: Always start here when users ask \"Show me my notebooks\" or need to work with any notebook. This is the ID discovery tool.\n\n🔗 TOOL CONNECTIONS:\n• notebooks() → find notebook by name → notebook_select(ID) → sections() → pages(sectionID)\n• notebooks() provides IDs needed for ALL other operations\n• Users think in names, but API requires IDs - this tool translates\n\n📝 TYPICAL WORKFLOWS:\n• 'Show my notebooks' → notebooks() → display list with names and IDs\n• 'Work with X notebook' → notebooks() → find X → notebook_select(X_ID) → sections()\n• 'Create page in Y notebook' → notebooks() → find Y → notebook_select(Y_ID) → sections() → page_create(sectionID)\n\n📊 RESPONSE FORMAT - JSON array with:\n• id: Notebook ID for API operations (e.g., \"1-abc123...\")\n• name: Display name (e.g., \"Work Notebook\")\n• isAPIDefault: OneNote's default per Microsoft Graph API\n• isConfigDefault: Matches server's configured default\n• permission: Access level (read/write) if authorization enabled\n• canSelect: Whether user can select this notebook\n\n⚡ ALWAYS EXPLAIN RESULTS: \"I found your 'Work' notebook (ID: 1-abc123). It has write permission and contains 5 sections...\"\n\n⚠️ CRITICAL: This is the ONLY way to translate notebook names to IDs. All other tools require actual IDs, NOT names.",

	"section_create": "Create a new section in a notebook or section group.\n\n📝 PARAMETERS:\n• containerID (optional): Notebook ID or Section Group ID - auto-uses default notebook if blank\n• displayName (required): Section display name (must be valid)\n\n⚠️ HIERARCHY RULES - CRITICAL:\n• Sections can ONLY be created in: Notebooks OR Section Groups\n• Sections CANNOT be created inside other sections\n• Sections contain pages, not other sections/groups\n\n🚫 NAME RESTRICTIONS - Cannot contain:\n? * \\ / : < > | & # ' ' % ~\n\n✅ SUGGESTED ALTERNATIVES:\n• & → 'and' (\"Research & Development\" → \"Research and Development\")\n• / → '-' (\"Before/After\" → \"Before-After\")\n• : → '-' (\"TODO: Items\" → \"TODO - Items\")\n• < > → parentheses (\"Important\" → \"(Important)\")\n\n🔄 WORKFLOW EXAMPLES:\n• 'Create section in notebook' → sections() → get notebook ID → section_create(notebookID, \"Section Name\")\n• 'Create section in group' → sections() → find section group ID → section_create(groupID, \"Sub Section\")\n\n⚠️ ERROR HANDLING:\n• Illegal characters: Returns \"displayName contains illegal character '[char]'. Suggested valid name: '[suggestion]'\"\n• Invalid containerID: Returns \"No containerID provided and failed to get default notebook: [error]\"\n• Missing displayName: Returns \"displayName is required\"\n• Creation failed: Returns \"Failed to create section: [error details]\"\n\n⚙️ BEHAVIOR: Always validates names and suggests alternatives for illegal characters",

	"section_group_create": "Create a new section group (folder) in a notebook or another section group.\n\n📝 PARAMETERS:\n• containerID (optional): Notebook ID or Section Group ID - auto-uses default notebook if blank\n• displayName (required): Section group display name (must be valid)\n\n⚠️ HIERARCHY RULES - CRITICAL:\n• Section Groups can be created in: Notebooks OR other Section Groups\n• Section Groups CANNOT be created inside sections\n• Section Groups can contain: Sections AND other Section Groups\n• Think of them as folders that organize content\n\n🚫 NAME RESTRICTIONS - Cannot contain:\n? * \\ / : < > | & # ' ' % ~\n\n✅ SUGGESTED ALTERNATIVES:\n• & → 'and' (\"Projects & Ideas\" → \"Projects and Ideas\")\n• / → '-' (\"Work/Personal\" → \"Work-Personal\")\n• : → '-' (\"Archive: Old\" → \"Archive - Old\")\n• < > → parentheses (\"Archive\" → \"(Archive)\")\n\n🔄 WORKFLOW EXAMPLES:\n• 'Create main folder' → sections() → get notebook ID → section_group_create(notebookID, \"Main Folder\")\n• 'Create sub-folder' → sections() → find parent group ID → section_group_create(parentGroupID, \"Sub Folder\")\n\n⚠️ ERROR HANDLING:\n• Illegal characters: Returns \"displayName contains illegal character '[char]'. Suggested valid name: '[suggestion]'\"\n• Invalid containerID: Returns \"No containerID provided and failed to get default notebook: [error]\"\n• Missing displayName: Returns \"displayName is required\"\n• Creation failed: Returns \"Failed to create section group: [error details]\"\n\n🏠 PURPOSE: Hierarchical organization - folders containing sections and other folders",

	"notebook_current": "Get the currently selected notebook's metadata from the server's memory cache.\n\n📋 WHAT IT SHOWS: The \"active\" notebook that all other tools operate on by default\n\n🔗 TOOL CONNECTIONS:\n• notebook_current() → shows current selection\n• If none selected → notebook_select(ID) to choose one\n• After selection → sections() and pages() work on this notebook\n\n🔄 WORKFLOW EXAMPLES:\n• 'What notebook am I working with?' → notebook_current() → shows active notebook\n• 'Switch to different notebook' → notebooks() → notebook_select(new_ID) → notebook_current() to verify\n\n📊 RESPONSE FORMAT:\n• Full notebook object with ID, displayName, metadata\n• Error if no notebook selected (use notebook_select first)\n\n⚙️ SERVER BEHAVIOR:\n• Initially set to configured default notebook on startup\n• Falls back to first available notebook if no default\n• Persists for entire server session\n• All section/page operations use this notebook unless explicitly changed",

	"notebook_select": "Select a notebook by name or ID to set as the active notebook context for all subsequent operations.\n\n🎯 PURPOSE: Sets the \"working notebook\" - all sections(), pages(), and page operations will use this notebook\n\n🔗 TOOL CONNECTIONS:\n• notebooks() → find notebook → notebook_select(ID) → sections() → pages()\n• After selection → notebook_current() shows active notebook\n• All page operations inherit this notebook context\n\n📝 PARAMETERS:\n• identifier (required): Notebook name (\"My Work Notebook\") OR notebook ID (\"1-abc123...\")\n\n🔄 WORKFLOW EXAMPLES:\n• 'Work with my Project notebook' → notebooks() → find \"Project\" → notebook_select(\"Project\") → sections()\n• 'Switch to different notebook' → notebook_select(different_ID) → new context set\n\n⚙️ BEHAVIOR:\n• Notebook choice persists for entire server session\n• Full metadata cached in memory for fast access\n• Authorization validated if enabled (checks permission levels)\n\n⚡ DISCOVERY PATTERN: Use notebooks() first if unsure of exact name or need the ID\n\n⚠️ ERROR HANDLING:\n• Notebook not found: Returns \"Failed to find notebook '[identifier]' by name or ID. Use notebooks() to see available notebooks.\"\n• Authorization denied: Returns \"Authorization denied: [details]. Check notebook permissions in configuration.\"\n• Missing identifier: Returns \"Missing required parameter: identifier (notebook name or ID)\"\n• Empty identifier: Returns \"identifier cannot be empty. Provide notebook name or ID.\"",

	"sections": "Shows your notebook's organizational structure - sections and section groups in a tree format. Essential for understanding layout and getting IDs for page operations.\n\n🏗️ WHAT IT SHOWS: Tree structure like folders containing subfolders and files\n• Section Groups (folders) → can contain sections and other groups\n• Sections (files) → contain the actual pages\n\n🔗 TOOL CONNECTIONS:\n• notebook_select(ID) → sections() → see structure → pages(sectionID)\n• sections() provides sectionIDs needed for pages(), page_create(), etc.\n• Use this BEFORE pages() to find the right sectionID\n\n📋 WORKFLOW EXAMPLES:\n• 'Show me my notebook structure' → sections() → displays tree with all sections/groups\n• 'Find pages in Work section' → sections() → find 'Work' sectionID → pages(sectionID)\n• 'Where should I create a page?' → sections() → pick target section → page_create(sectionID)\n\n📊 RESPONSE FORMAT:\n• Notebook root object with displayName, id\n• children array containing nested sections and section groups\n• Each item has: type, id, name, children (for groups)\n• All IDs ready for use in other operations\n\n⚙️ FEATURES:\n• Handles pagination automatically (retrieves all results)\n• 5-minute memory cache for fast subsequent access\n• Progress notifications for large structures\n• Hierarchical display shows parent-child relationships\n\n⚠️ ERROR HANDLING:\n• If no notebook selected: Returns \"No notebook is currently selected. Use notebook_select tool to select a notebook first.\"\n• If notebook has no sections: Returns empty children array with message \"No sections found in this notebook\"\n• If API fails: Returns \"Failed to fetch sections: [error details]\" with troubleshooting suggestions",

	"cache_clear": "Clear all cached data to force fresh API retrieval. Use when stale data is suspected or to force fresh data retrieval.\n\n💾 WHAT GETS CLEARED:\n• Notebook sections tree structure (forces fresh sections() calls)\n• Page metadata for all sections (forces fresh pages() calls) \n• Page search results cache (for quicknote and page finding)\n• Notebook lookup cache (for name-to-ID resolution)\n\n💾 WHAT STAYS UNCHANGED:\n• Currently selected notebook context\n• Authentication tokens and session\n• Configuration settings\n• Server state\n\n🔄 WORKFLOW EXAMPLE:\nUser: \"My changes aren't showing up\"\n→ Step 1: cache_clear → clears all cached data\n→ Step 2: sections() → fetches fresh structure from API\n→ Step 3: pages(sectionID) → fetches fresh page list\n\n⚙️ USE WHEN:\n• Stale data suspected (changes not appearing)\n• Made changes outside this MCP server\n• Troubleshooting cache-related issues\n• Want to ensure most up-to-date information\n\n✅ RESULT: Next sections() and pages() calls will fetch fresh data from Microsoft Graph API and rebuild cache automatically.",

	"pages": "⚠️ CRITICAL: sectionID must be an actual ID (e.g., '0-abc123...'), NEVER a section name.\n\n📝 PARAMETERS:\n• sectionID (required): Actual section ID from sections() tool - NOT section name\n• Example: \"0-abc123def456\" ✓ vs \"Work Section\" ✗\n\n🔗 TOOL CONNECTIONS:\n• sections() → find section ID → pages(sectionID) → get page list\n• pages() provides pageIDs needed for page_content(), page_update(), etc.\n• NEVER assume IDs are known - always use discovery pattern\n\n🔄 WORKFLOW EXAMPLES:\n• 'Show pages in Work section' → sections() → find 'Work' sectionID → pages(sectionID)\n• 'Get latest page from X' → pages(sectionID) → sort by lastModifiedDateTime → page_content(mostRecentPageID)\n• 'List all pages' → sections() → for each section → pages(sectionID)\n\n📊 RESPONSE FORMAT:\n• JSON array of page objects with:\n• pageID: Use for page_content(), page_update(), page_delete()\n• title: Page display name\n• createdDateTime: When page was created\n• lastModifiedDateTime: When page was last updated\n• Additional metadata and links\n\n⚙️ FEATURES:\n• Cached results for fast subsequent access\n• Progress notifications for large sections\n• Authorization filtering applied automatically\n\n⚠️ ERROR HANDLING:\n• Invalid sectionID: Returns \"Section not found: [sectionID]. Use sections() to get valid section IDs.\"\n• Section name used: Returns \"sectionID must be actual ID, not section name. Use sections() first.\"\n• No notebook selected: Returns \"No notebook selected. Use notebook_select first.\"\n• Empty section: Returns \"No pages found in the specified section. The section may be empty or you may need to create pages first.\"\n• API failure: Returns \"Failed to list pages: [error details]\" with retry suggestions",

	"page_content": "Get OneNote page content in multiple formats with flexible output options.\n\n📝 PARAMETERS:\n• pageID (required): Page ID from pages() tool (e.g., \"1-abc123def456\")\n• format (optional): Choose output format\n  - 'HTML' (default): Full OneNote formatting, images, structure\n  - 'Markdown': Clean Markdown conversion from HTML\n  - 'Text': Plain text with minimal formatting\n• forUpdate (optional): 'true' = adds data-id attributes (HTML only)\n\n⚠️ IMPORTANT RESTRICTIONS:\n• forUpdate ONLY works with HTML format (needed for updates)\n• Markdown/Text formats cannot use forUpdate=true\n• Only HTML includes data-id attributes for page_update_advanced\n\n🔄 USAGE EXAMPLES:\n• Read content: page_content(pageID, format='Markdown')\n• Prepare for updates: page_content(pageID, forUpdate=true, format='HTML')\n• Get plain text: page_content(pageID, format='Text')\n• Default: page_content(pageID) → returns HTML\n\n🔗 TOOL CONNECTIONS:\n• pages(sectionID) → get pageID → page_content(pageID)\n• page_content(forUpdate=true) → page_update_advanced()\n• page_content() → analyze content → page_update() for full replacement\n\n📊 RESPONSE FORMAT: JSON with content, format, lengths, conversion details\n\n⚠️ ERROR HANDLING:\n• Invalid pageID: Returns \"Page not found: [pageID]. Use pages() to get valid page IDs.\"\n• Invalid format: Returns \"Invalid format '[format]'. Valid formats are: HTML, Markdown, Text\"\n• forUpdate with non-HTML: Returns \"forUpdate parameter can only be used with HTML format (for page updates)\"\n• Page access denied: Returns \"Access denied: page belongs to different notebook than selected\"\n• Conversion failure: Returns \"Failed to convert content to [format]: [error details]\"",

	"page_create": "Create a new page in a section with content in ANY format. ⚠️ DO NOT CONVERT CONTENT - tool handles all format conversion automatically.\n\n📝 PARAMETERS:\n• sectionID (required): Section ID from sections() tool (e.g., \"0-abc123def456\")\n• title (required): Page title (must be valid)\n• content (required): Page content - pass exactly as provided by user\n\n🔄 WORKFLOW EXAMPLES:\n• 'Create page with Markdown' → page_create(sectionID, \"My Page\", \"# Header\\n- Item 1\")\n• 'Create page with plain text' → page_create(sectionID, \"Notes\", \"This is my note\")\n• 'Create page with HTML' → page_create(sectionID, \"Formatted\", \"<h1>Title</h1>\")\n\n🚫 TITLE RESTRICTIONS - Cannot contain:\n? * \\ / : < > | & # ' ' % ~\n\n✅ SUGGESTED ALTERNATIVES:\n• & → 'and' • / → '-' • : → '-' • < > → parentheses\n\n⚡ CRITICAL RULES:\n• Pass content EXACTLY as user provided - no conversion\n• Tool automatically detects format (Markdown/HTML/Text)\n• Tool handles ALL conversion internally\n• Trust the automatic processing\n\n🔗 TOOL CONNECTIONS:\n• sections() → find sectionID → page_create(sectionID, title, content)\n• page_create() → returns pageID → page_content(pageID) to verify\n\n📊 RESPONSE: Success status, pageID, detected format, conversion details",

	"page_update_advanced": "Update specific elements in a OneNote page using precise command-based targeting. ⚠️ DO NOT CONVERT CONTENT - tool handles all format conversion automatically.\n\n📝 PARAMETERS:\n• pageID (required): Page ID from pages() tool\n• commands (required): JSON string with array of command objects\n• Each command content accepts: Raw Markdown, Plain text, or HTML as-is\n\n🔄 COMPLETE STEP-BY-STEP EXAMPLE:\n1. Get page with IDs: page_content(\"1-abc123def456\", forUpdate=true)\n2. Response shows HTML like: \"<div data-id='element-789'>Old content</div><h1 data-id='title-123'>Old Title</h1>\"\n3. Identify targets: title-123 for header, element-789 for content\n4. Build commands array:\n   [\n     {\"target\": \"data-id:title-123\", \"action\": \"replace\", \"content\": \"# Updated Title\"},\n     {\"target\": \"data-id:element-789\", \"action\": \"replace\", \"content\": \"New paragraph content\"}\n   ]\n5. Execute: page_update_advanced(\"1-abc123def456\", JSON.stringify(commands))\n6. Result: Title becomes \"Updated Title\", content becomes \"New paragraph content\"\n\n🎯 TARGETING OPTIONS:\n• data-id: \"data-id:element-123\" (most precise - from forUpdate=true)\n• title: \"title\" (targets page title)\n• element: \"h1\", \"p:first\", \"table\" (CSS-like selectors)\n• body: \"body\" (main content area)\n\n⚙️ COMMAND ACTIONS:\n• replace: Replace target element completely\n• append: Add content after target element\n• insert: Add content at position (after/before/inside)\n• delete: Remove target element entirely\n\n📝 REAL COMMAND EXAMPLES:\n```json\n[\n  {\"target\": \"title\", \"action\": \"replace\", \"content\": \"Meeting Notes - January 15\"},\n  {\"target\": \"body\", \"action\": \"append\", \"content\": \"## Action Items\\n- Review proposal\\n- Schedule follow-up\"},\n  {\"target\": \"data-id:p{53C6BDCC-5F3D-4F5E-8F7E-1234567890AB}{15}\", \"action\": \"insert\", \"content\": \"**Important:** \", \"position\": \"before\"}\n]\n```\n\n⚠️ ERROR CASES:\n• No forUpdate=true: Returns \"Cannot find target elements without data-id attributes\"\n• Invalid target: Returns \"Target 'data-id:missing-element' not found in page\"\n• Invalid JSON: Returns \"Failed to parse commands JSON\"\n\n⚠️ TABLE RESTRICTION: Update tables as complete units only - cannot modify individual cells\n\n⚡ CRITICAL: Pass content exactly as provided - tool handles ALL format conversion automatically\n\n📊 RESPONSE: Success status, commands processed, format detection results per command",

	"page_delete": "Delete a OneNote page permanently. This action CANNOT be undone.\n\n📝 PARAMETERS:\n• pageID (required): Page ID from pages() tool (e.g., \"1-abc123def456\")\n\n⚠️ CRITICAL WARNING: PERMANENT DELETION - NO RECOVERY POSSIBLE\n• Once deleted, page and all content are gone forever\n• Always verify correct pageID before proceeding\n• Consider asking user for confirmation\n\n🔄 WORKFLOW EXAMPLES:\n• 'Delete specific page' → pages(sectionID) → find pageID → confirm with user → page_delete(pageID)\n• 'Remove old page' → page_content(pageID) → verify it's correct page → page_delete(pageID)\n\n🔗 TOOL CONNECTIONS:\n• pages(sectionID) → find target pageID → page_delete(pageID)\n• page_content(pageID) → verify page contents → page_delete(pageID)\n\n📊 RESPONSE: Simple success confirmation message\n\n⚙️ BEHAVIOR: Clears page caches automatically after deletion",

	"page_item_content": "Get a page item (image, file) by ID. Returns binary data with proper MIME type.\n\n📝 PARAMETERS:\n• pageID (required): Page ID from pages() tool\n• pageItemID (required): Item ID from page_items() tool\n• filename (optional): Custom filename for download\n• fullSize (optional): 'true' = original size, 'false' = scaled to 1024x768 max\n\n🔗 TOOL CONNECTIONS:\n• page_items(pageID) → find pageItemID → page_item_content(pageID, pageItemID)\n\n📊 RESPONSE: Binary data with proper MIME type, filename, and size information",

	"page_items": "List all items (images, files, attachments) on a specific page.\n\n📝 PARAMETERS:\n• pageID (required): Page ID from pages() tool\n\n🔗 TOOL CONNECTIONS:\n• pages(sectionID) → find pageID → page_items(pageID) → page_item_content(pageID, itemID)\n\n📊 RESPONSE: JSON array with pageItemID, tagName, type, data-attachment info",

	"page_copy": "Copy a page from one section to another, creating a duplicate.\n\n📝 PARAMETERS:\n• pageID (required): Source page ID to copy\n• targetSectionID (required): Destination section ID\n\n🔗 TOOL CONNECTIONS:\n• pages(sectionID) → find source pageID → sections() → find target sectionID → page_copy(pageID, targetSectionID)\n\n⚙️ BEHAVIOR: Creates exact duplicate in target section, original remains unchanged",

	"page_move": "Move a page from one section to another (copy + delete original).\n\n📝 PARAMETERS:\n• pageID (required): Source page ID to move\n• targetSectionID (required): Destination section ID\n\n🔗 TOOL CONNECTIONS:\n• pages(sectionID) → find source pageID → sections() → find target sectionID → page_move(pageID, targetSectionID)\n\n⚙️ BEHAVIOR: Copies page to target, then deletes original - net result is page relocation",

	"quick_note": "QUICK NOTE TAKING: Instantly add notes to OneNote with automatic timestamps. Perfect for 'add this as a quick note' requests.\n\n🎯 PRIMARY USE: When user says 'add this as a quick note', 'jot this down', 'save this note quickly', or 'add to my notes'\n\n📝 PARAMETERS:\n• content (required): Note content - pass exactly as provided (Markdown/Text/HTML)\n\n⚡ INSTANT WORKFLOW:\n• Automatically finds your configured QuickNote page\n• Adds timestamp header (e.g., 'January 15, 2025 - 2:30 PM')\n• Appends your content below the timestamp\n• No need to specify notebook or page - all automatic\n\n🔄 EXAMPLE USAGE:\nUser: 'Add this as a quick note: Remember to review the proposal'\n→ quick_note('Remember to review the proposal')\n→ Automatically appends to configured page with timestamp\n\n⚙️ CONFIGURATION REQUIRED:\n• quicknote.page_name: Target page name (e.g., 'Daily Notes')\n• quicknote.notebook_name: Target notebook (optional - uses default)\n• quicknote.date_format: Timestamp format (optional)\n\n🎯 KEYWORDS: quick note, add note, jot down, save note, rapid notes, note taking, add this, quick add",

	"page_update": "Replace the entire content of a page with new content in ANY format. ⚠️ DO NOT CONVERT CONTENT - tool handles all format conversion automatically.\n\n📝 PARAMETERS:\n• pageID (required): Page ID from pages() tool (e.g., \"1-abc123def456\")\n• content (required): New page content - pass exactly as provided by user\n\n🎯 USE CASE: Complete page content replacement (entire page overwrite)\n\n🔄 WORKFLOW EXAMPLES:\n• 'Update with Markdown' → page_update(pageID, \"# New Header\\n- Updated item\")\n• 'Update with plain text' → page_update(pageID, \"Updated content here\")\n• 'Update with HTML' → page_update(pageID, \"<h1>New Title</h1><p>Content</p>\")\n\n⚡ CRITICAL RULES:\n• Pass content EXACTLY as user provided - no conversion\n• Tool automatically detects format (Markdown/HTML/Text)\n• Tool handles ALL conversion internally\n• Trust the automatic processing\n\n🔗 TOOL CONNECTIONS:\n• pages(sectionID) → find pageID → page_update(pageID, newContent)\n• For partial updates: use page_update_advanced instead\n• page_update() → page_content(pageID) to verify changes\n\n📊 RESPONSE: Success status, detected format, conversion details",
}

// GetToolDescription returns the description for a specific tool
func GetToolDescription(toolName string) (string, error) {
	desc, exists := toolDescriptions[toolName]
	if !exists {
		return "", fmt.Errorf("description not found for tool: %s", toolName)
	}
	return desc, nil
}

// MustGetToolDescription returns the description for a tool or panics if not found
// This should only be used during server initialization where we want to fail fast
func MustGetToolDescription(toolName string) string {
	desc, exists := toolDescriptions[toolName]
	if !exists {
		panic(fmt.Sprintf("Tool description not found: %s", toolName))
	}
	return desc
}

// GetAllDescriptions returns all available tool descriptions
func GetAllDescriptions() map[string]string {
	// Return a copy to prevent modification of the original map
	result := make(map[string]string, len(toolDescriptions))
	for k, v := range toolDescriptions {
		result[k] = v
	}
	return result
}
